import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getAllInvites, getAllApp, addAppt } from './appApi';
import PairingHeap from "../../pairingHeap";

const initialState = {
    appt: new PairingHeap(),
    invites: [],
    status: 'idle',
};





// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.




export const fetchApp = createAsyncThunk(
    'appoint/fetchApp',
    async (email) => {
        const response = await getAllApp(email);

        return response;
    }
);

export const createApp = createAsyncThunk(
    'appoint/CrApp',
    async (data) => {
        const response = await addAppt(data);
        // The value we return becomes the `fulfilled` action payload
        console.log("cr resp  ", response);
        return response;
    }
);






export const fetchInvites = createAsyncThunk(
    'appoint/fetch',
    async (uid) => {
        const response = await getAllInvites(uid);
        // The value we return becomes the `fulfilled` action payload

        return response;
    }
);




export const appSlice = createSlice({
    name: 'appoint',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {

        // Use the PayloadAction type to declare the contents of `action.payload`

        // updateUser: (state, action) => {
        //     state.value = action.payload;
        // },
    },

    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.

    extraReducers: (builder) => {
        builder
            .addCase(fetchApp.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(fetchApp.fulfilled, (state, action) => {
                // console.log("payload.  ", action.payload);
                state.status = 'idle';
                let temp_apt = action.payload;
                for (let i = 0; i < temp_apt.length; i++) {
                    let ap = temp_apt[i];
                    let key = ap.timestamp;

                    state.appt.insert(key, ap);
                }


                // console.log("satte.     ", state.appt);
            })

            .addCase(createApp.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(createApp.fulfilled, (state, action) => {
                // console.log("payload.  ", action.payload);

                state.status = 'idle';
                let ap = action.payload;
                let key = ap.timestamp;
                console.log(11111,key,ap);
                state.appt.insert(key, ap);

                // console.log("satte.     ", state.appt);
            })





            .addCase(fetchInvites.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(fetchInvites.fulfilled, (state, action) => {
                // console.log("payload.  ", action.payload);
                state.status = 'idle';
                state.invites = action.payload;
            });

    },

});

// export const { updateUser } = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`


export const selectAppts = (state) => state.appointment.appt;
export const selectInvites = (state) => state.appointment.invites;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default appSlice.reducer;
