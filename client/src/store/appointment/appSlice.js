import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getAllApp, addAppt, updateAppt } from './appApi';
// import PairingHeap from "../../pairingHeap";

const initialState = {
    appt: [],
    invites: [],
    status: 'idle',
};





// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.




export const fetchApp = createAsyncThunk(
    'appoint/fetchApp',
    async (email) => {
        const response = await getAllApp(email);

        return response;
    }
);

export const createApp = createAsyncThunk(
    'appoint/CrApp',
    async (data) => {
        const response = await addAppt(data);
        // The value we return becomes the `fulfilled` action payload


        return response;
    }
);


export const updateApp =createAsyncThunk(
    'appoint/UpApp',
    async (data) => {
   
        const response = await updateAppt(data);

        return response;
    }
);






export const appSlice = createSlice({
    name: 'appoint',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {

        // Use the PayloadAction type to declare the contents of `action.payload`

        flushApp: (state) => {
            state.appt = [];
        },
    },

    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.

    extraReducers: (builder) => {
        builder
            .addCase(fetchApp.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(fetchApp.fulfilled, (state, action) => {
     
                state.status = 'idle';
                state.appt = action.payload;
               

            })

            .addCase(createApp.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(createApp.fulfilled, (state, action) => {
                state.status = 'idle';
                state.appt.push(action.payload);
            })


            .addCase(updateApp.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(updateApp.fulfilled, (state, action) => {
                state.status = 'idle';
                let arr = action.payload;
                console.log(action.payload)
                let data = arr[0];
                let i = arr[1];
 
                console.log(i,", ",data);
                console.log("CASE")
      
                state.appt[i] = data;
            })





            // .addCase(fetchInvites.pending, (state) => {
            //     state.status = 'loading';
            // })
            // .addCase(fetchInvites.fulfilled, (state, action) => {
            //     // console.log("payload.  ", action.payload);
            //     state.status = 'idle';
            //     state.invites = action.payload;
            // });

    },

});

export const { flushApp } = appSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`


export const selectAppts = (state) => state.appointment.appt;
// export const selectInvites = (state) => state.appointment.invites;


// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default appSlice.reducer;
