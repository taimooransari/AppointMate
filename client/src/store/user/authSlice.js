import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { signupUser, logout, loginUser } from './userAPI';

const initialState = {
    value: null,
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.


export const signup = createAsyncThunk(
    'user/signup',
    async (usr) => {
        const response = await signupUser(usr);
        // The value we return becomes the `fulfilled` action payload
        console.log("data.  ", response);
        return response;
    }
);

export const login = createAsyncThunk(
    'user/login',
    async (usr) => {
        const response = await loginUser(usr);
        // The value we return becomes the `fulfilled` action payload
        console.log("data.  ", response);
        return response;
    }
);

export const logoutUser = createAsyncThunk(
    'user/logout',
    async () => {
        await logout();
       
    }
);




export const authSlice = createSlice({
    name: 'user',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {

        // Use the PayloadAction type to declare the contents of `action.payload`
        updateUser: (state, action) => {
            state.value = action.payload;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.

    extraReducers: (builder) => {
        builder
            .addCase(signup.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(signup.fulfilled, (state, action) => {
                console.log("payload.  ", action.payload);
                state.status = 'idle';
                state.value = action.payload;
            })



            .addCase(login.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(login.fulfilled, (state, action) => {
                console.log("payload.  ", action.payload);
                state.status = 'idle';
                state.value = action.payload;
            })



            .addCase(logoutUser.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(logoutUser.fulfilled, (state) => {
                state.status = 'idle';
                state.value = null;
            });
    },

});

export const { updateUser } = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state) => state.user.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default authSlice.reducer;
